apiVersion: lcnc.yndd.io/v1
kind: ControllerConfig
metadata:
  name: infraController
  namespace: default
spec:
  properties:
    for: 
      infra: 
        gvr: 
          apiVersion: infra.yndd.io/v1alpha1
          resource: infrastructures
      pipeline:
        nodes:
          type: query
          input:
            gvr:
              apiVersion: topo.yndd.io/v1alpha1
              resources: nodes
            selector: 
              matchLabels: 
                yndd.io/topology: $infra.spec.topology
        links:
          type: query
          input:
            gvr: 
              apiVersion: topo.yndd.io/v1alpha1
              resources: Links
            selector: 
              matchLabels: 
                yndd.io/topology: $infra.spec.topology
                yndd.io/linktype: not infra
        getNetworkAllocations:
          range: 
            value: $links
          networkInfraAllocator:
            image: networkInfraAllocator
            input: 
              link: $VALUE
              nodeEpA: .select($nodes.metadata.labels[yndd.io/nodeName] == $VALUE.spec.endpointA)
              nodeEpB: .select($nodes.metadata.labels[yndd.io/nodeName] == $VALUE.spec.endpointB)
            output: 
              nodeInfo: 
                internal: true
                gvk: 
                  apiVersion: yndd.io/v1alpha1
                  kind: NodeInfo
              asAllocations: asAllocations 
              niAllocations: niAllocations 
              ipAllocations: ipAllocations 
        createNodeConfigAndState:
          range:
            value: ${networkInfraAllocator.nodeInfo}
          infraConfig:
            image: infraConfig
            input:
              nodeInfo: $VALUE
              nodeAsAllications: .select(${getNetworkAllocations.networkInfraAllocator.asAllocations}.metadata.labels[yndd.io/nodeName] == $VALUE.metadata.name)
              nodeIpAllications: .select(${infra.getNetworkAllocations.networkInfraAllocator.ipAllocations}.metadata.labels[yndd.io/nodeName] == $VALUE.metadata.name)
              nodeNiAllocations: .select(${infra.getNetworkAllocations.networkInfraAllocator.ipAllocations}.metadata.labels[yndd.io/nodeName] == $VALUE.metadata.name)  
            output: 
              config: 
                gvk: 
                  apiVersion: yndd.io/v1alpha1
                  kind: networkConfigs
          infraState:
            image: infraState
            config: stateInfo
            input:
              nodeInfo: $VALUE
            output: 
              state: 
                gvk:
                  apiVersion: yndd.io/v1alpha1
                  kind: networkStates
    services:
      - asInjection: { image: asInjection }
        ipInjection: { image: ipInjection }
        niInjection: { image: niInjection }

# function -> name: infraConfig implements libraries
      #createInterface: physical (lag, member), loopback/system, irb
      #createTunnelInterface: vxlan or mple
      #create SubInterface: loopback/system
      #create route policy
      #create network instance
      #create bgp, group, evpn
      #create system evpn constructs