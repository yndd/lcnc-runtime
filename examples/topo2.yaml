apiVersion: lcnc.yndd.io/v1
kind: ControllerConfig
metadata:
  name: topoController
  namespace: default
spec:
  properties:
    for: 
      topo: 
        gvr: topo.yndd.io/v1alpha1/definitions
        pipeline:
          targets:
            type: query
            input:
              gvr: target.yndd.io/v1/targets 
              selector:
          alltemplates:
            type: query
            input: 
              gvr: topo.yndd.io/v1alpha1/templates
          getParentTemplateNames:
            range:
              value: $topo.spec.properties.templates
              # condition:
              #   expression: xxx
            parentTemplateNames:
              type: slice # output is name of the function
              input: 
                value: $VALUE.name
          getParentTemplates:
            range:
              value: ${topo.getAllParentTemplates.parentTemplateNames}
            parentTemplates:
              type: map # output is name of the function
              input: 
                key: $VALUE
                value: .select(${topo.allTemplates}.name == $VALUE)
          getChildTemplates:
            range: 
              value: $parentTemplates
            childTemplates:
              type: map
              input:
                key: $VALUE.metadata.name
                value: $allTemplates == "$VALUE.spec.properties.fabric.pod[*].definitionRef
          getDiscoveryRuleNames:
            range:
              value: $topo.spec.properties.discoveryRules
            discoveryRuleNames:
              type: slice
              input:
                value: $VALUE.metatdata.name
          createTopology:
            image: topology
            input:
              topology: $topo # can be implicit
            output: 
              Topologies: topo.yndd.io/v1alpha1/topologies
          createFabric:
            range:
              value: $parentTemplates
            createFabric:
              image: topologyBuilderFromTemplate
              getChildTemplates:
                range:
                  value: $childTemplates
                  condition:
                    expression: 
                localChildTemplates:
                  type: slice
                  input: 
                    value: $KEY 
              input:
                parentTemplate: $VALUE
                localChildTemplates: $localChildTemplates
              output: 
                TemplateNodes: topo.yndd.io/v1alpha1/nodes  
                Templatelinks: topo.yndd.io/v1alpha1/links
          createNode:
            range: 
              value: $discoveryRuleNames
            createNode:
              image: nodeBuilderFromDiscoveryRule
              getTargets:
                type: slice
              vars: 
                targets:
                  slice:
                    value: {query: $targets, selector: { name: $KEY}}
              input:
                targets: $targets
              output: 
                DiscoveryNodes: topo.yndd.io/v1alpha1/nodes 
